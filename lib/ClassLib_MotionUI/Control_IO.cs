using System;using System.Collections.Generic;using System.ComponentModel;using System.Drawing;using System.Data;using System.Linq;using System.Text;using System.Windows.Forms;using ClassLib_ParaFile;using ClassLib_Motion;namespace ClassLib_MotionUI{    public partial class Control_IO : UserControl    {        int _IO_Type = 0;        [CategoryAttribute("自定义属性"), DescriptionAttribute("IO类型：0输入1输出2限位3原点")]        public int IO_Type        {            get            {                return _IO_Type;            }            set            {                _IO_Type = value;                if (_IO_Type < 0 || _IO_Type > 3)                    _IO_Type = 0;                if (3 == _IO_Type)                    Width /= 2;                InitIoName();            }        }        int _CardNum = 0;        [CategoryAttribute("自定义属性"), DescriptionAttribute("卡号：0-9为主卡10-19为扩展卡")]        public int CardNum        {            get            {                return _CardNum;            }            set            {                _CardNum = value;            }        }        int _IoTotal = 24;        [CategoryAttribute("自定义属性"), DescriptionAttribute("IO总数：默认16，可修改为20,24,32,36,40")]        public int IoTotal        {            get            {                return _IoTotal;            }            set            {                _IoTotal = value;                InitIoName();            }        }        [CategoryAttribute("自定义事件"), DescriptionAttribute("输出点击触发后事件")]        public event System.EventHandler DoCheckEvent = null;        [CategoryAttribute("自定义事件"), DescriptionAttribute("输出点击触发前事件")]        public event DoBeginCheckdelegate DoBeginCheckEvent = null;        //List<string> _ListIoName = new List<string>(16);        List<Label> _ListIoLabel = new List<Label>(24);        List<Label> _ListShowLabel = new List<Label>(24);        static System.Collections.ArrayList m_ArrayList_Controls = new System.Collections.ArrayList(100);        public void InitIoName()        {            //if (_ListIoName.Count() > 0)            //    return;            //_ListIoName.Clear();            _ListIoLabel.Clear();
            //_ListIoLabel.Add(Label_IO_1);
            //_ListIoLabel.Add(Label_IO_2);
            //_ListIoLabel.Add(Label_IO_3);
            //_ListIoLabel.Add(Label_IO_4);
            //_ListIoLabel.Add(Label_IO_5);
            //_ListIoLabel.Add(Label_IO_6);
            //_ListIoLabel.Add(Label_IO_7);
            //_ListIoLabel.Add(Label_IO_8);
            //_ListIoLabel.Add(Label_IO_9);
            //_ListIoLabel.Add(Label_IO_10);
            //_ListIoLabel.Add(Label_IO_11);
            //_ListIoLabel.Add(Label_IO_12);
            //_ListIoLabel.Add(Label_IO_13);
            //_ListIoLabel.Add(Label_IO_14);
            //_ListIoLabel.Add(Label_IO_15);
            //_ListIoLabel.Add(Label_IO_16);
            for (int i = 1; i <= IoTotal; i++)
            {
                _ListIoLabel.Add((Label)(GetType().GetField("Label_IO_" + i.ToString(), System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance).GetValue(this)));
                _ListIoLabel[i - 1].Visible = true;
            }            _ListShowLabel.Clear();
            //_ListShowLabel.Add(Label_Name_1);
            //_ListShowLabel.Add(Label_Name_2);
            //_ListShowLabel.Add(Label_Name_3);
            //_ListShowLabel.Add(Label_Name_4);
            //_ListShowLabel.Add(Label_Name_5);
            //_ListShowLabel.Add(Label_Name_6);
            //_ListShowLabel.Add(Label_Name_7);
            //_ListShowLabel.Add(Label_Name_8);
            //_ListShowLabel.Add(Label_Name_9);
            //_ListShowLabel.Add(Label_Name_10);
            //_ListShowLabel.Add(Label_Name_11);
            //_ListShowLabel.Add(Label_Name_12);
            //_ListShowLabel.Add(Label_Name_13);
            //_ListShowLabel.Add(Label_Name_14);
            //_ListShowLabel.Add(Label_Name_15);
            //_ListShowLabel.Add(Label_Name_16);
            for (int i = 1; i <= IoTotal; i++)
            {
                _ListShowLabel.Add((Label)(GetType().GetField("Label_Name_" + i.ToString(), System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance).GetValue(this)));
                _ListShowLabel[i - 1].Visible = true;
            }            for (int i = IoTotal + 1; i <= 40; i++)
            {
                ((Label)(GetType().GetField("Label_IO_" + i.ToString(), System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance).GetValue(this))).Visible = false;
                ((Label)(GetType().GetField("Label_Name_" + i.ToString(), System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance).GetValue(this))).Visible = false;
            }
                string sIO = "";            string sTest = "";            if (0 == _IO_Type)            {                if (_CardNum > 9)                    sIO = "DXI";                else                    sIO = "EXI";                sTest = "IN";            }            else if (1 == _IO_Type)            {                if (_CardNum > 9)                    sIO = "DXO";                else                    sIO = "EXO";                sTest = "OT";            }            else if (2 == _IO_Type)            {                sIO = "LIMIT";                sTest = "L";            }            else if (3 == _IO_Type)            {                sIO = "HOME";                sTest = "H";            }            for (int i = 0; i < _ListShowLabel.Count; i++)            {                if (2 != _IO_Type)                {//非限位                    _ListIoLabel[i].Name = (sIO + i + "_" + _CardNum % 10);                    _ListIoLabel[i].Text = sTest + i;                    if (CardNum > 9)                    {                        Motion.AddNegateIO(_ListIoLabel[i].Name);                        try                        {                            Motion.SetDo(_ListIoLabel[i].Name, false);                        }                        catch { }                    }                }                else                {//限位                    if (0 == i % 2)                    {                        _ListIoLabel[i].Name = (sIO + (i / 2) + "P_" + _CardNum % 10);                        _ListIoLabel[i].Text = sTest + (i / 2) + "+";                    }                    else                    {                        _ListIoLabel[i].Name = (sIO + (i / 2) + "N_" + _CardNum % 10);                        _ListIoLabel[i].Text = sTest + (i / 2) + "-";                    }                }            }            //for (int i = 0; i < 16; i++)            //{            //    if (2 != _IO_Type)            //        _ListIoName.Add(sIO + i + "_" + _CardNum % 10);            //    else            //    {            //        if (0 == i % 2)            //            _ListIoName.Add(sIO + (i / 2) + "P_" + _CardNum % 10);            //        else            //            _ListIoName.Add(sIO + (i / 2) + "N_" + _CardNum % 10);            //    }            //    _ListIoLabel[i].Name = _ListIoName[i];            //}            //Label_IO_1.Name = _ListIoName[0];            //Label_IO_2.Name = _ListIoName[1];            //Label_IO_3.Name = _ListIoName[2];            //Label_IO_4.Name = _ListIoName[3];            //Label_IO_5.Name = _ListIoName[4];            //Label_IO_6.Name = _ListIoName[5];            //Label_IO_7.Name = _ListIoName[6];            //Label_IO_8.Name = _ListIoName[7];            //Label_IO_9.Name = _ListIoName[8];            //Label_IO_10.Name = _ListIoName[9];            //Label_IO_11.Name = _ListIoName[10];            //Label_IO_12.Name = _ListIoName[11];            //Label_IO_13.Name = _ListIoName[12];            //Label_IO_14.Name = _ListIoName[12];            //Label_IO_15.Name = _ListIoName[14];            //Label_IO_16.Name = _ListIoName[15];        }        public Control_IO()        {            InitializeComponent();        }        private void Label_IO_1_MouseClick(object sender, MouseEventArgs e)        {            if (1 != IO_Type)                return;            try            {                if (MouseButtons.Left == e.Button)                {                    Label P = (Label)sender;                    if (P.Name.Contains("DXO") || P.Name.Contains("EXO"))                    {                        if (DoBeginCheckEvent != null)                        {                            if (!DoBeginCheckEvent(P.Name, e))                                return;                        }                        bool bLevel = Motion.ReadOutput(P.Name);//GetIo                        //bLevel = !bLevel;                        Motion.SetDo(P.Name, bLevel);                        if (DoCheckEvent != null)                        {                            DoCheckEvent(P.Name, e);                        }                    }                }            }            catch (Exception ex)            {                System.Diagnostics.Trace.WriteLine(ex.Message); ;            }        }        public override void Refresh()        {            int i = 0;            foreach (Label P in _ListIoLabel)            {                if (3 == _IO_Type && i >= 8)                    break;                i++;                if (Motion.ReadIo(P.Name))//ReadIo
                {                    if (P.Name.Contains("XO"))//EXO                    {                        P.BackColor = System.Drawing.Color.Green;                    }                    else                        //P.BackColor = System.Drawing.Color.LimeGreen;                        P.Image = ClassLib_MotionUI.Properties.Resources.ball_green;                }                else                {                    if (P.Name.Contains("XO"))//EXO                    {                        P.BackColor = System.Drawing.Color.Gray;                    }                    else                     {                        P.Image = ClassLib_MotionUI.Properties.Resources.ball_red;                    }                }            }        }        void UpdateShow()        {            for (int i = 0; i < _ListShowLabel.Count; i++)            {                if (3 == _IO_Type && i >= 8)                    break;                AbsIo io = Motion.GetDicIo(_ListIoLabel[i].Name);                if (io != null)                    _ListShowLabel[i].Text = io.m_sName;            }        }        public static void RefreshAllUI(System.Windows.Forms.Control.ControlCollection cControls, bool bAwaysRefresh = false)        {            if (m_ArrayList_Controls.Count == 0)            {                UpdateControlList(cControls);            }            foreach (System.Windows.Forms.Control obj in m_ArrayList_Controls)            {                if (bAwaysRefresh || (obj.Visible && obj.Enabled))                    ((Control_IO)obj).Refresh();            }        }        public static void UpdateControlList(System.Windows.Forms.Control.ControlCollection cControls)
        {
            m_ArrayList_Controls.Clear();
            Publics.GetAllControlsRecursion(typeof(Control_IO), cControls, ref m_ArrayList_Controls);
            foreach (object obj in m_ArrayList_Controls)
            {
                ((Control_IO)obj).UpdateShow();
            }
        }    }}